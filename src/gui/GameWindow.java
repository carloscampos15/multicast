/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import cliente.Cliente;
import cliente.Notificable;
import game.Mundo;
import game.Person;
import gamebase.GraphicContainer;
import gamebase.PanelContainer;
import java.awt.Rectangle;
import java.io.IOException;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Es la interfaz donde los clientes pueden interactuar y jugar
 *
 * @author Karen Castaño Orjuela Castaño
 * @author Carlos Alberto Campos Armero
 */
public class GameWindow extends javax.swing.JFrame
        implements GraphicContainer, Notificable {

    protected Mundo mundo;
    protected PanelContainer panel;
    protected Cliente cliente;

    /**
     * Creates new form MundoView
     */
    public GameWindow(Cliente cliente) {
        initComponents();
        jTextAreaMensaje.setLineWrap(true);
        jTextAreaChat.setLineWrap(true);
        this.cliente = cliente;
        this.cliente.setNotificableRed(this);
        this.cliente.ejecutarCliente();

        try {
            this.cliente.updateName(cliente.getNombre());
        } catch (IOException ex) {
            System.out.println(">>ERROR CREANDO CLIENTE");
        } catch (JSONException ex) {
            System.out.println(">>ERROR CREANDO JSON CON LA INFORMACION DEL CLIENTE");
        }
    }

    public void iniciar(int xPanel, int yPanel, int wPanel, int hPanel) {
        this.panel = new PanelContainer(this, contenedor);
        this.panel.setBounds(xPanel, yPanel, wPanel, hPanel);
        this.contenedor.add(panel);
    }

    public PanelContainer getPanel() {
        return panel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaChat = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaMensaje = new javax.swing.JTextArea();
        jButtonEnviar = new javax.swing.JButton();
        contenedor = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListPosiciones = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jTextAreaChat.setEditable(false);
        jTextAreaChat.setColumns(20);
        jTextAreaChat.setRows(5);
        jScrollPane2.setViewportView(jTextAreaChat);

        jTabbedPane2.addTab("Mensajes", jScrollPane2);

        jTextAreaMensaje.setColumns(20);
        jTextAreaMensaje.setRows(5);
        jScrollPane3.setViewportView(jTextAreaMensaje);

        jButtonEnviar.setText("Enviar mensaje");
        jButtonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonEnviar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout contenedorLayout = new javax.swing.GroupLayout(contenedor);
        contenedor.setLayout(contenedorLayout);
        contenedorLayout.setHorizontalGroup(
            contenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        contenedorLayout.setVerticalGroup(
            contenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        jTabbedPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTabbedPane1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTabbedPane1KeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jListPosiciones);

        jTabbedPane1.addTab("Tabla de posiciones", jScrollPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnviarActionPerformed
        try {
            String mensaje = jTextAreaMensaje.getText();

            this.cliente.enviarMensaje(mensaje);

            jTextAreaMensaje.setText("");
        } catch (IOException ex) {
            System.out.println(">>ERROR ENVIANDO MENSAJE");
        } catch (JSONException ex) {
            System.out.println(">>ERROR CREANDO JSON CON LA INFORMACION DEL CLIENTE");
        }
    }//GEN-LAST:event_jButtonEnviarActionPerformed

    private void jTabbedPane1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabbedPane1KeyReleased
        try {
            this.cliente.setPosicion(this.mundo.getPerson().getIdentificador(), this.mundo.getPerson().getX(), this.mundo.getPerson().getY());
        } catch (IOException ex) {
            System.out.println(">>ERROR CREANDO CLIENTE");
        } catch (JSONException ex) {
            System.out.println(">>ERROR CREANDO JSON CON LA INFORMACION DEL CLIENTE");
        }
    }//GEN-LAST:event_jTabbedPane1KeyReleased

    private void jTabbedPane1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabbedPane1KeyPressed
        Person[] usuarios = this.panel.keyPressed(evt);
        if (usuarios != null) {
            Person p1 = usuarios[0];
            Person p2 = usuarios[1];
            try {
                this.cliente.iniciarPPT(p1.getIdentificador(), p2.getIdentificador());
            } catch (JSONException ex) {
                System.out.println(">>ERROR CREANDO JSON CON LA INFORMACION DEL CLIENTE");
            } catch (IOException ex) {
                System.out.println(">>ERROR ENVIANDO MENSAJE");
            }
        }

        try {
            this.cliente.moverUsuario(this.mundo.getPerson().getIdentificador(), this.mundo.getPerson().getX(), this.mundo.getPerson().getY());
        } catch (JSONException ex) {
            System.out.println(">>ERROR CREANDO JSON CON LA INFORMACION DEL CLIENTE");
        } catch (IOException ex) {
            System.out.println(">>ERROR ENVIANDO MENSAJE");
        }
    }//GEN-LAST:event_jTabbedPane1KeyPressed

    public void iniciarMundo(Mundo mundo, int xP, int yP, int wP, int hP) {
        this.iniciar(xP, yP, wP, hP);
        this.mundo = mundo;
        this.panel.setMundo(mundo);
        this.repaint();
    }

    @Override
    public void refresh() {
        this.repaint();
    }

    @Override
    public Rectangle getBoundaries() {
        return this.getBounds();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contenedor;
    private javax.swing.JButton jButtonEnviar;
    private javax.swing.JList<String> jListPosiciones;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextAreaChat;
    private javax.swing.JTextArea jTextAreaMensaje;
    // End of variables declaration//GEN-END:variables

    @Override
    public void login(String mensaje, int idNotificable) {
        if (idNotificable == 1) {
            String chat = jTextAreaChat.getText();
            String val = chat.equals("") ? "" : "\n";
            jTextAreaChat.setText(chat + val + mensaje);
        } else if (idNotificable == 2) {
            try {
                JSONObject receivedJson = new JSONObject(mensaje);
                JSONObject posicion = new JSONObject(receivedJson.getString("posicion"));
                this.mundo.createPerson(posicion.getInt("x"), posicion.getInt("y"), receivedJson.getInt("identificador"), receivedJson.getString("nombre_usuario"));
            } catch (JSONException ex) {
                System.out.println(">>Error obteniendo la informacion");
            }
        }
    }

    @Override
    public void nuevoUsuario(String mensaje, int idNotificable) {
        if (idNotificable == 1) {

        } else if (idNotificable == 2) {
            try {
                JSONObject receivedJson = new JSONObject(mensaje);
                if (receivedJson.has("usuarios")) {
                    JSONArray usuarios = receivedJson.getJSONArray("usuarios");
                    for (int i = 0; i < usuarios.length(); i++) {
                        JSONObject obj = usuarios.getJSONObject(i);
                        this.mundo.createPersonSesion(obj.getInt("x"), obj.getInt("y"), obj.getInt("identificador"), obj.getString("nombre_usuario"));
                    }
                } else {
                    JSONObject posiciones = new JSONObject(receivedJson.getString("posicion"));
                    this.mundo.createPersonSesion(posiciones.getInt("x"), posiciones.getInt("y"), receivedJson.getInt("identificador"), receivedJson.getString("nombre_usuario"));
                }
            } catch (JSONException ex) {
                System.out.println(">>Error obteniendo la informacion");
            }
        }
    }

    @Override
    public void nuevoMensaje(String mensaje, int idNotificable) {
        if (idNotificable == 1) {
            try {
                JSONObject receivedJson = new JSONObject(mensaje);
                String chat = jTextAreaChat.getText();
                String val = chat.equals("") ? "" : "\n";
                jTextAreaChat.setText(chat + val + receivedJson.getString("nombre_usuario") + ": " + receivedJson.getString("mensaje"));
            } catch (JSONException ex) {
                System.out.println(">>Error obteniendo la informacion");
            }
        } else if (idNotificable == 2) {

        }
    }

    @Override
    public void moverJugador(String mensaje, int idNotificable) {
        if (idNotificable == 1) {
            try {
                JSONObject receivedJson = new JSONObject(mensaje);
                this.mundo.findPersonById(receivedJson.getInt("identificador"), receivedJson.getInt("x"), receivedJson.getInt("y"));

            } catch (JSONException ex) {
                System.out.println(">>Error obteniendo la informacion");
            }
        } else if (idNotificable == 2) {

        }
    }

    @Override
    public void nuevoPPT(String mensaje, int idNotificable) {
        if (idNotificable == 1) {
        } else if (idNotificable == 2) {
            try {
                Home home = new Home(this, true);
                JSONObject receivedJson = new JSONObject(mensaje);
                String nombreOponente = "";
                int identificadorOponente = 0;
                if (receivedJson.getInt("id_jugador1") != this.mundo.getPerson().getIdentificador()) {
                    nombreOponente = receivedJson.getString("nombre_jugador1");
                    identificadorOponente = receivedJson.getInt("id_jugador1");
                } else {
                    nombreOponente = receivedJson.getString("nombre_jugador2");
                    identificadorOponente = receivedJson.getInt("id_jugador2");
                }

                home.setNombreOponente(nombreOponente);
                home.setIdentificadorOponente(identificadorOponente);

                home.setCliente(this.cliente);
                home.setIdentificadorCliente(this.mundo.getPerson().getIdentificador());

                home.setIdentificadorSala(receivedJson.getInt("id_sala"));

                home.setVisible(true);
            } catch (JSONException ex) {
                System.out.println(">>Error obteniendo la informacion");
            }
        }
    }


//    @Override
//    public void deshabilitarJuego(String mensaje) {
//        
//    }
//
//    @Override
//    public void habilitarJuego(String mensaje) {
//        
//    }
//
//    @Override
//    public void jugar(JSONObject receivedJson) {
//        
//    }
//
//    @Override
//    public void notifiacionJuegoNuevo(String mensaje) {
//        
//    }
}
